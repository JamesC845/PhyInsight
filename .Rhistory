### create DNA dist matrix
DistMatrix <- as.matrix(ape::dist.dna(ape::as.DNAbin(DNAStringSet)))
### ieshows 2 columns (rows/columns) which show location of each string causing NaN
NaNlocs <- which(is.nan(DistMatrix), arr.ind = TRUE)
NaNlocs <- table(NaNlocs)
NaNlocs <- NaNlocs[NaNlocs > 2]
NaNlocs <- names(NaNlocs)
###
if(is.character(NaNlocs) == T) {
DNAStringSet <- DNAStringSet[-as.numeric(NaNlocs)]
specimen_dataframe_new <- specimen_dataframe_new[-as.numeric(NaNlocs), ]
}
###
#DNAStringSet <- DNAStringSet[-c(as.numeric(NaNlocs)), ]    <<< original line
##############################################################################
##############################################################################
##############################################################################
##############################################################################
##############################################################################
######################## filter out outlier distance strings (added 14-11-23)
### function to calculate Z scores
calculate_Zscore <- function(x){
z <- (x - mean(x)) / sd(x)
z <- abs(z)
z <- as.matrix(z)
return(z)
}
### use which() to find locations of outlier dna distances
outLocs <- which(
calculate_Zscore(DistMatrix) > max_Z_score,
arr.ind = TRUE
)
###
outLocs <- table(outLocs)
outLocs <- outLocs[outLocs > 3]
outLocs <- names(outLocs)
###
#  #if (is.null(outLocs) == F) {
#  if (!is.null(outLocs)) {
#    DNAStringSet <- DNAStringSet[-as.numeric(outLocs)]
#
#    DF_NEW   <- specimen_dataframe
#    DF_NEW <- DF_NEW[row.names(DF_NEW) %in% names(DNAStringSet), ]
#
#    specimen_dataframe_new <- DF_NEW
#
#  }
if(rmOutliers == T){
while (!is.null(outLocs)) {
DNAStringSet <- DNAStringSet[-as.numeric(outLocs), ]
specimen_dataframe_new <- specimen_dataframe_new[-as.numeric(outLocs), ]
DF_NEW <- specimen_dataframe_new
#      DF_NEW <- DF_NEW[row.names(DF_NEW) %in% names(DNAStringSet), ] # original
DF_NEW <- DF_NEW[names(DNAStringSet) %in% row.names(DF_NEW), ]
specimen_dataframe_new <- DF_NEW
print(paste("Outlier strings detected and removed: ", outLocs))
###
DistMatrix <- as.matrix(ape::dist.dna(ape::as.DNAbin(DNAStringSet)))
### use which() to find locations of outlier dna distances
outLocs <- which(
calculate_Zscore(DistMatrix) > max_Z_score,
arr.ind = TRUE
)
###
outLocs <- table(outLocs)
outLocs <- outLocs[outLocs > 3]
outLocs <- names(outLocs)
outLocs
}
}
##############################################################################
##############################################################################
###
return(list(DNAStringSet, specimen_dataframe_new))
}
rm(list=ls())
library(devtools)
devtools::document()
devtools::build(vignettes = F)
library(devtools)
devtools::document()
devtools::build(vignettes = F)
specdata <- PhyInsight::querySpecData("Alouatta")
getGenusRepr <- function(specimen_dataframe){
genus_split <- split(specimen_dataframe, specimen_dataframe$genus_name)
genus_sample <- list()
for(i in 1:length(genus_split)){
genus_sample[[i]] <- genus_split[[i]][1,]
}
genus_sample <- do.call(rbind, genus_sample)
return(genus_sample)
}
specdata <- getSpeciesRepr(specdata)
specdata <- getGenusRepr(specdata)
rm(list=ls())
library(devtools)
devtools::document()
devtools::build(vignettes = F)
library(devtools)
devtools::use_vignette()
usethis::use_vignette("Ursidae_PhyloTree")
?rmBadStrings_3
rm(list=ls())
setwd("C:/Users/jimmy/OneDrive/R/PhyInsight_Workspace/phylo_trees")
library(PhyInsight)
library(dplyr)
specdata <- PhyInsight::querySpecData("Ursidae") # Ursidae (family)
specdata_orig <- specdata
table(specdata$markercode)
table(specdata_orig$markercode)
### automatically find the name most common marker
markerCommon <-
subset(specdata, markercode == row.names(as.data.frame(sort(table(specdata$markercode), decreasing = T)[1]))
)
row.names(markerCommon) <- 1:length(markerCommon[,1])
###
specdata <- subset(specdata, markercode == "COI-5P")
DNABin <- genDNABin(specdata)
DNAStringset <- genDNAStringSet(DNABin)
DNAStringSet_manip <- ManipStringSet(DNAStringset)
plot(genPhytree(DNAStringSet_manip))
#
specdata <- PhyInsight::getSpeciesRepr(specdata)
plot(genPhytree(DNAStringSet_manip))
################################################################################
### test  3
test3 <- rmBadStrings_3(
DNAStringSet_manip,
specdata,
rmOutliers = F#,
#    max_Z_score = 20
)
DNAStringSet_manip
rm(list=ls())
setwd("C:/Users/jimmy/OneDrive/R/PhyInsight_Workspace/phylo_trees")
library(PhyInsight)
library(dplyr)
specdata <- PhyInsight::querySpecData("Ursidae") # Ursidae (family)
specdata_orig <- specdata
table(specdata$markercode)
table(specdata_orig$markercode)
### automatically find the name most common marker
markerCommon <-
subset(specdata, markercode == row.names(as.data.frame(sort(table(specdata$markercode), decreasing = T)[1]))
)
row.names(markerCommon) <- 1:length(markerCommon[,1])
###
specdata <- subset(specdata, markercode == "COI-5P")
#
specdata <- PhyInsight::getSpeciesRepr(specdata)
specdata <- specdata_orig
table(specdata$markercode)
table(specdata_orig$markercode)
### automatically find the name most common marker
markerCommon <-
subset(specdata, markercode == row.names(as.data.frame(sort(table(specdata$markercode), decreasing = T)[1]))
)
row.names(markerCommon) <- 1:length(markerCommon[,1])
###
specdata <- subset(specdata, markercode == "COI-5P")
DNABin <- genDNABin(specdata)
DNAStringset <- genDNAStringSet(DNABin)
DNAStringSet_manip <- ManipStringSet(DNAStringset)
################################################################################
### test  3
test3 <- rmBadStrings_3(
DNAStringSet_manip,
specdata,
rmOutliers = F#,
#    max_Z_score = 20
)
################################################################################
### test  3
test3 <- rmBadStrings_3(
DNAStringSet_manip,
specdata,
rmOutliers = T#,
#    max_Z_score = 20
)
specdata <- specdata_orig
table(specdata$markercode)
table(specdata_orig$markercode)
### automatically find the name most common marker
markerCommon <-
subset(specdata, markercode == row.names(as.data.frame(sort(table(specdata$markercode), decreasing = T)[1]))
)
row.names(markerCommon) <- 1:length(markerCommon[,1])
###
specdata <- subset(specdata, markercode == "COI-5P")
specdata <- PhyInsight::getSpeciesRepr(specdata)
DNABin <- genDNABin(specdata)
DNAStringset <- genDNAStringSet(DNABin)
DNAStringSet_manip <- ManipStringSet(DNAStringset)
################################################################################
### test  3
test3 <- rmBadStrings_3(
DNAStringSet_manip,
specdata,
rmOutliers = T#,
#    max_Z_score = 20
)
###
test3[[1]] %>% length
test3[[2]]$processid %>% length
plot(genPhytree(DNAStringSet_manip), specdata)
plot(genPhytree(DNAStringSet_manip))
specdata <- specdata_orig
### automatically find the name most common marker
markerCommon <-
subset(specdata, markercode == row.names(as.data.frame(sort(table(specdata$markercode), decreasing = T)[1]))
)
row.names(markerCommon) <- 1:length(markerCommon[,1])
###
specdata <- subset(specdata, markercode == "COI-5P")
specdata <- PhyInsight::getGenusRepr(specdata)
DNABin <- genDNABin(specdata)
DNAStringset <- genDNAStringSet(DNABin)
DNAStringSet_manip <- ManipStringSet(DNAStringset)
################################################################################
### test  3
test3 <- rmBadStrings_3(
DNAStringSet_manip,
specdata,
rmOutliers = T#,
#    max_Z_score = 20
)
###
test3[[1]] %>% length
test3[[2]]$processid %>% length
plot(genPhytree(DNAStringSet_manip))
specdata <- specdata_orig
table(specdata$markercode)
table(specdata_orig$markercode)
### automatically find the name most common marker
markerCommon <-
subset(specdata, markercode == row.names(as.data.frame(sort(table(specdata$markercode), decreasing = T)[1]))
)
row.names(markerCommon) <- 1:length(markerCommon[,1])
###
specdata <- subset(specdata, markercode == "COI-5P")
specdata <- PhyInsight::getSpeciesRepr(specdata)
DNABin <- genDNABin(specdata)
DNAStringset <- genDNAStringSet(DNABin)
DNAStringSet_manip <- ManipStringSet(DNAStringset)
################################################################################
### test  3
test3 <- rmBadStrings_3(
DNAStringSet_manip,
specdata,
rmOutliers = T#,
#    max_Z_score = 20
)
###
test3[[1]] %>% length
test3[[2]]$processid %>% length
###
PhyInsight::savePhytree(
phyloTree = genPhytree(test3[[1]]),
specimen_dataframe = test3[[2]],
tree_file_name = "tree #3.pdf",
open_PDF = T,
label_offset = 0,
label_size = 0.75
)
dev.off
dev.off()
rm(list=ls())
specdata <- PhyInsight::querySpecData("Ursidae") # Ursidae (family)
specdata_orig <- specdata
table(specdata$markercode)
table(specdata_orig$markercode)
### automatically find the name most common marker
markerCommon <-
subset(specdata, markercode == row.names(as.data.frame(sort(table(specdata$markercode), decreasing = T)[1]))
)
row.names(markerCommon) <- 1:length(markerCommon[,1])
###
specdata <- subset(specdata, markercode == "COI-5P")
DNABin <- genDNABin(specdata)
DNAStringset <- genDNAStringSet(DNABin)
DNAStringSet_manip <- ManipStringSet(DNAStringset)
specdata <- specdata_orig
table(specdata$markercode)
table(specdata_orig$markercode)
### automatically find the name most common marker
markerCommon <-
subset(specdata, markercode == row.names(as.data.frame(sort(table(specdata$markercode), decreasing = T)[1]))
)
row.names(markerCommon) <- 1:length(markerCommon[,1])
###
specdata <- subset(specdata, markercode == "COI-5P")
#
specdata <- PhyInsight::getSpeciesRepr(specdata)
DNABin <- genDNABin(specdata)
DNAStringset <- genDNAStringSet(DNABin)
DNAStringSet_manip <- ManipStringSet(DNAStringset)
Phytree <- genPhytree(DNAStringSet_manip)
plot(Phytree)
###
PhyInsight::savePhytree(
phyloTree = DNAStringset,
specimen_dataframe = specdata,
tree_file_name = "new_phylo_tree.pdf",
open_PDF = T,
label_offset = 0,
label_size = 0.75
)
###
PhyInsight::savePhytree(
phyloTree = DNAStringset,
specimen_dataframe = specdata,
tree_file_name = "new_phylo_tree.pdf",
open_PDF = T,
label_offset = 0,
label_size = 0.75
)
###
PhyInsight::savePhytree(
phyloTree = DNAStringset_manip,
specimen_dataframe = specdata,
tree_file_name = "new_phylo_tree.pdf",
open_PDF = T,
label_offset = 0,
label_size = 0.75
)
###
PhyInsight::savePhytree(
phyloTree = DNAStringSet,
specimen_dataframe = specdata,
tree_file_name = "new_phylo_tree.pdf",
open_PDF = T,
label_offset = 0,
label_size = 0.75
)
###
PhyInsight::savePhytree(
phyloTree = DNAStringSet_manip,
specimen_dataframe = specdata,
tree_file_name = "new_phylo_tree.pdf",
open_PDF = T,
label_offset = 0,
label_size = 0.75
)
DNAStringSet_manip
specdata
###
PhyInsight::savePhytree(
phyloTree = DNAStringSet_manip,
specimen_dataframe = specdata,
tree_file_name = "new_phylo_tree.pdf",
open_PDF = T,
label_offset = 0,
label_size = 0.75
)
specdata$processid %>% length
DNAStringSet_manip
###
PhyInsight::savePhytree(
phyloTree = DNAStringSet_manip,
specimen_dataframe = specdata,
tree_file_name = "new_phylo_tree.pdf",
open_PDF = T,
label_offset = 0,
label_size = 0.75
)
###
PhyInsight::savePhytree(
phyloTree = DNAStringSet_manip,
specimen_dataframe = specdata,
tree_file_name = "new_phylo_tree.pdf",
open_PDF = T,
label_offset = 0,
label_size = 0.75
)
###
PhyInsight::savePhytree(
phyloTree = DNAStringSet_manip,
specimen_dataframe = specdata,
tree_file_name = "new_phylo_tree.pdf",
open_PDF = T,
label_offset = 0,
label_size = 0.75
)
specdata
DNAStringSet_manip
plot(Phytree)
names(Phytree)
names(Phytree$edge)
names(Phytree$tip.label)
names(Phytree$Nnode)
names(Phytree$edge.length)
Phytree$edge
Phytree$edge.length
Phytree$tip.label
specdata$country
specdata$species_name
Phytree$tip.label
Phytree$tip.label <- specdata$species_name
plot(Phytree)
plot(
Phytree,
label.offset = 0.05
)
plot(
Phytree,
label.offset = 0.005
)
plot(
Phytree,
label.offset = 0.0005
)
plot(
Phytree,
label.offset = 0.0005,
cex = 0.2
)
plot(
Phytree,
label.offset = 0.0005,
cex = 1
)
plot(
Phytree,
label.offset = 0.0005,
cex = 0.6
)
plot(
Phytree,
label.offset = 0.0005,
cex = 0.8
)
Phytree <- genPhytree(DNAStringSet_manip)
class(Phytree)
dev.off()
library(PhyInsight)
paste(specdata$species_name, "|", specdata$country)
# automatically manipulate the DNA strings
DNAStringSet <- ManipStringSet(DNAStringset)
# automatically generate a phylo tree
PhyloTree <- genPhytree(DNAStringSet)
# change the label names
PhyloTree$tip.label <- paste(specdata$species_name, "|", specdata$country)
specdata$species_name
specdata$species_name
specdata$country
specdata$species_name
specdata$genus_name
specdata$subspecies_name
specdata$associated_specimens
specdata$species_taxID
specdata$subspecies_taxID
specdata$subspecies_name
# automatically generate a phylo tree
PhyloTree <- genPhytree(DNAStringSet)
# change the label names
PhyloTree$tip.label <- paste(specdata$genus_name, "|", specdata$species_name)
# plot the phylo tree
plot(
PhyloTree,
label.offset = 0.0005,
cex = 0.8,
main = "Ursidae Phylogenetic Tree"
)
# Your input string
input_string <- "yeah you"
# Split the string based on space
split_string <- strsplit(input_string, " ")[[1]]
split_string
# Extract the word after the space
word_after_space <- split_string[2]
# Print the result
print(word_after_space)
# Your input string
input_string <- "yeah you"
# Split the string based on space
split_string <- strsplit(input_string, " ")#[[1]]
split_string
# Your input string
input_string <- specdata$species_name
# Split the string based on space
split_string <- strsplit(input_string, " ")[[1]]
split_string
# Your input string
input_string <- specdata$species_name
input_string
1L
# Your input string
species_names <- specdata$species_name
species_names
# Split the string based on space
split_string <- strsplit(species_names, " ")[[1]]
split_string
# Split the string based on space
split_string <- apply(
species_names,
strsplit(species_names, " ")[[1]]
)
# Split the string based on space
split_string <- lapply(
species_names,
strsplit(species_names, " ")[[1]]
)
species_names
# Your input string
species_names <- specdata$species_name
# Split the string based on space
split_string <- lapply(
species_names,
strsplit(" ")[[1]]
)
rm(list=ls())
PhyInsight::savePhytree
