devtools::build(vignettes = T) # allowed it to delete inst/doc
devtools::document()
devtools::build(vignettes = T) # allowed it to delete inst/doc
devtools::clean_vignettes() # ran but not sure ih helped or not
tools::buildVignettes(dir = getwd()) # this was helpful to checking ONE OF the index issues
# added a line to the index.Rmd file and may have helped...
devtools::document()
devtools::build(vignettes = T) # allowed it to delete inst/doc
devtools::check()
devtools::document()
devtools::build(vignettes = T)
devtools::check()
rm(list=ls())
devtools::document()
devtools::build(vignettes = T) # allowed it to delete inst/doc
devtools::check()
library(PhyInsight)
genDNAStringSet
genDNAStringSet
devtools::document()
devtools::build(vignettes = T) # allowed it to delete inst/doc
devtools::check()
oldpar <- par(no.readonly = TRUE)    # code line i
oldpar
base::getwd
base::setwd
library(devtools)
devtools::document()
devtools::build(vignettes = T)
library(PhyInsight)
genDNAStringSet
devtools::build(vignettes = T)
devtools::document()
devtools::build(vignettes = T)
?genDNAStringSet
?genDNAStringSet
?genDNAStringSet
library(PhyInsight)
genDNAStringSet
?genDNAStringSet
devtools::build(vignettes = F)
detach("package:PhyInsight", unload = TRUE)
install.packages("C:/Users/jimmy/OneDrive/R/PhyInsight_Directory/PhyInsight_0.1.0.tar.gz", repos = NULL, type = "source")
?PhyInsight::genDNAStringSet
PhyInsight::genDNAStringSet
library(PhyInsight)
library(PhyInsight)
PhyInsight::genDNAStringSet
?genDNAStringSet
# generate a DNA string set object using the taxon 'Antheraea polyphemus'
specdf_Anth <- querySpecData("Antheraea polyphemus")[1:10,]
DNABin_Anth <- genDNABin(specdf_Anth)
DNAStringset_Anth <- genDNAStringSet(DNABin_Anth)
DNAStringset_Anth
rm(list=ls())
setwd("C:\\Users\\jimmy\\OneDrive\\Desktop\\File Remove")
library(PhyInsight)
# generate a DNA string set object using the taxon 'Antheraea polyphemus'
specdf_Anth <- querySpecData("Antheraea polyphemus")[1:10,]
DNABin_Anth <- genDNABin(specdf_Anth)
DNAStringset_Anth <- genDNAStringSet(DNABin_Anth)
DNAStringset_Anth
savePhytree <- function(phyloTree, specimen_dataframe, label_offset = 0.000055, label_size = 0.3,
tree_file_name = "Phylogenetic_Tree.pdf", openPDF = FALSE, savePDF = FALSE){
### restore directory
orig_dir <- getwd()
temp_dir <- tempdir()
setwd(temp_dir)
on.exit(setwd(orig_dir), add = TRUE)
### restore options
orig_par <- par(no.readonly = TRUE)
on.exit(par(orig_par), add = TRUE)
###
if(savePDF == TRUE){
setwd(orig_dir)
}
###
phyloTree$edge.length <- phyloTree$edge.length + (mean(phyloTree$edge.length) * 0.1)
###
phyloTree$tip.label <- paste(
row.names(specimen_dataframe), "|",
c(specimen_dataframe$species_name), "|",
c(specimen_dataframe$country)
)
###
grDevices::pdf(tree_file_name, width = 12, height = 8)
graphics::par(mar=c(0, 0, 0, 0))
plot(
phyloTree,
cex = label_size,
label.offset = label_offset
)
###
grDevices::dev.off()
### R command to open the file
if(openPDF == TRUE){
system(paste("open", shQuote(tree_file_name)))
}
}
?savePhytree()
specdf_Anth <- querySpecData("Antheraea polyphemus")[1:10,]
DNABin_Anth <- genDNABin(specdf_Anth)
DNAStringset_Anth <- genDNAStringSet(DNABin_Anth)
DNAStringSet_Anth_manipulated <- ManipStringSet(DNAStringset_Anth)
Phytree_Anth <- genPhytree(DNAStringSet_Anth_manipulated)
savePhytree(
phyloTree = Phytree_Anth,
specimen_dataframe = specdf_Anth,
tree_file_name = "Anth_phylo_tree.pdf",
openPDF = TRUE,
savePDF = FALSE
)
#' @return A DNA string set
#' @export
#'
#' @examples # generate a DNA string set object using the taxon 'Antheraea polyphemus'
#'
#' specdf_Anth <- querySpecData("Antheraea polyphemus")[1:10,]
#'
#' DNABin_Anth <- genDNABin(specdf_Anth)
#'
#' DNAStringset_Anth <- genDNAStringSet(DNABin_Anth)
genDNAStringSet <- function(DNABin){
orig_dir <- getwd()
temp_dir <- tempdir()
setwd(temp_dir)
on.exit(setwd(orig_dir))
FASTA_fileName <- gsub(" ", "", "temp_DNAString_file.fasta")
ape::write.FASTA(x = ape::del.gaps(DNABin), file = FASTA_fileName)
FASTA_strings <- Biostrings::readDNAStringSet(filepath = FASTA_fileName,
format = "fasta"
)
closeAllConnections()
file.remove(FASTA_fileName)
return(FASTA_strings)
}
?genDNAStringSet
# generate a DNA string set object using the taxon 'Antheraea polyphemus'
specdf_Anth <- querySpecData("Antheraea polyphemus")[1:10,]
DNABin_Anth <- genDNABin(specdf_Anth)
DNAStringset_Anth <- genDNAStringSet(DNABin_Anth)
DNAStringset_Anth
rm(list=ls())
devtools::document
devtools::document()
library(devtools)
devtools::document()
devtools::build(vignettes = F)
install.packages("C:/Users/jimmy/OneDrive/R/PhyInsight_Directory/PhyInsight_0.1.0.tar.gz", repos = NULL, type = "source")
library(PhyInsight)
detach("package:PhyInsight", unload = TRUE)
install.packages("C:/Users/jimmy/OneDrive/R/PhyInsight_Directory/PhyInsight_0.1.0.tar.gz", repos = NULL, type = "source")
library(PhyInsight)
PhyInsight::genDNAStringSet
rm(list=ls())
setwd("C:\\Users\\jimmy\\OneDrive\\Desktop\\File Remove")
library(PhyInsight)
# generate a DNA string set object using the taxon 'Antheraea polyphemus'
specdf_Anth <- querySpecData("Antheraea polyphemus")[1:10,]
DNABin_Anth <- genDNABin(specdf_Anth)
DNAStringset_Anth <- genDNAStringSet(DNABin_Anth)
DNAStringset_Anth
?savePhytree
savePhytree(
phyloTree,
specimen_dataframe,
label_offset = 5.5e-05,
label_size = 0.3,
tree_file_name = "Phylogenetic_Tree.pdf",
openPDF = TRUE,
savePDF = FALSE
)
# create and plot a phylo tree
specdf_Anth <- querySpecData("Antheraea polyphemus")[1:10,]
DNABin_Anth <- genDNABin(specdf_Anth)
DNAStringset_Anth <- genDNAStringSet(DNABin_Anth)
DNAStringSet_Anth_manipulated <- ManipStringSet(DNAStringset_Anth)
Phytree_Anth <- genPhytree(DNAStringSet_Anth_manipulated)
savePhytree(
phyloTree = Phytree_Anth,
specimen_dataframe = specdf_Anth,
tree_file_name = "Anth_phylo_tree.pdf",
openPDF = TRUE,
savePDF = FALSE
)
library(devtools)
devtools::document()
devtools::build(vignettes = T)
devtools::build(vignettes = F)
install.packages("C:/Users/jimmy/OneDrive/R/PhyInsight_Directory/PhyInsight_0.1.0.tar.gz", repos = NULL, type = "source")
library(PhyInsight)
detach("package:PhyInsight", unload = TRUE)
install.packages("C:/Users/jimmy/OneDrive/R/PhyInsight_Directory/PhyInsight_0.1.0.tar.gz", repos = NULL, type = "source")
devtools::build(vignettes = T)
devtools::document()
devtools::build(vignettes = TRUE)
install.packages("C:/Users/jimmy/OneDrive/R/PhyInsight_Directory/PhyInsight_0.1.0.tar.gz", repos = NULL, type = "source")
library(PhyInsight)
PhyInsight::genDNAStringSet
PhyInsight::genPhytree
detach("package:PhyInsight", unload = TRUE)
library(PhyInsight)
PhyInsight::genPhytree
PhyInsight::genDNAStringSet
PhyInsight::genPhytree
detach("package:PhyInsight", unload = TRUE)
install.packages("C:/Users/jimmy/OneDrive/R/PhyInsight_Directory/PhyInsight_0.1.0.tar.gz", repos = NULL, type = "source")
library(PhyInsight)
PhyInsight::genPhytree
PhyInsight::genDNAStringSet
?genDNAStringSet
devtools::docuem
devtools::document()
devtools::document()
devtools::build(vignettes = TRUE)
install.packages("C:/Users/jimmy/OneDrive/R/PhyInsight_Directory/PhyInsight_0.1.0.tar.gz", repos = NULL, type = "source")
library(PhyInsight)
PhyInsight::genDNAStringSet
?PhyInsight::genDNAStringSet
?PhyInsight::genDNAStringSet
library(PhyInsight)
?PhyInsight::genDNAStringSet
detach("package:PhyInsight", unload = TRUE)
install.packages("C:/Users/jimmy/OneDrive/R/PhyInsight_Directory/PhyInsight_0.1.0.tar.gz", repos = NULL, type = "source")
library(PhyInsight)
?PhyInsight::genDNAStringSet
?PhyInsight::genDNAStringSet
PhyInsight::genDNAStringSet
?PhyInsight::getSpeciesRepr
?PhyInsight::rmBadStrings_2
library(PhyInsight)
querySpecData
genPhytree
library(PhyInsight)
querySpecData
getSpeciesRepr
devtools::document()
devtools::build(vignettes = FALSE)
devtools::clean_vignettes() # ran but not sure ih helped or not
tools::buildVignettes(dir = getwd()) # this was helpful to checking ONE OF the index issues
# added a line to the index.Rmd file and may have helped...
devtools::document()
devtools::build(vignettes = T) # allowed it to delete inst/doc
devtools::check()
install.packages("C:/Users/jimmy/OneDrive/R/PhyInsight_Directory/PhyInsight_0.1.0.tar.gz", repos = NULL, type = "source")
library(PhyInsight)
detach("package:PhyInsight", unload = TRUE)
install.packages("C:/Users/jimmy/OneDrive/R/PhyInsight_Directory/PhyInsight_0.1.0.tar.gz", repos = NULL, type = "source")
rm(list=ls())
specdata <- querySpecData("Xenophyophorea")[1:10,]
specdata <- querySpecData("Xenophyophorea")[1:10,]
library(PhyInsight)
specdata <- querySpecData("Xenophyophorea")[1:10,]
specdata <- querySpecData("Canidae")[1:10,]
specdata
specdata <- querySpecData("Rhizaria")[1:10,]
specdata <- querySpecData("Gromiidae")[1:10,]
specdata <- querySpecData("Foraminifera")[1:10,]
specdata <- querySpecData("Foraminifera")[1:50,]
specdata
table(specdata$species_name)
specdata <- querySpecData("Foraminifera")#[1:10,]
specdata <- querySpecData("Cercozoa")#[1:10,]
table(specdata$species_name)
specdata <- querySpecData("Polycystinea")#[1:10,]
specdata <- querySpecData("Alydidae")#[1:10,]
table(specdata$species_name)
table(specdata$species_name)
specdata <- PhyInsight::getSpeciesRepr(specdata)
# generate a DNA bin
DNABin <- genDNABin(specdata)
# use the DNA bin to create a DNA string set
DNAStringset <- genDNAStringSet(DNABin)
# automatically manipulate the DNA strings
DNAStringSet_manip <- ManipStringSet(DNAStringset)
plot(DNAStringSet_manip)
# use function to remove problem strings from the string set
BadStringsRemoved <- rmBadStrings_3(
DNAStringSet = DNAStringSet_manip,
specimen_dataframe = specdata
)
plot(DNAStringSet_manip)
# store the new objects
DNAStringSet_new <- BadStringsRemoved[[1]]
specdata_new <- BadStringsRemoved[[2]]
# automatically create a phylo tree
PhyloTree <- genPhytree(DNAStringSet_new)
plot(PhyloTree)
savePhytree(
phyloTree = Phytree_Anth,
specimen_dataframe = specdf_Anth,
tree_file_name = "figure.pdf",
openPDF = TRUE,
savePDF = FALSE,
label_size = 1,
label_offset = 0
)
dev.off()
rm(list=ls())
specdata <- querySpecData("Nepenthes")
specdata <- querySpecData("Nepenthes")
library(PhyInsight)
specdata <- querySpecData("Nepenthes")
specdata$run_dates
names(specdata)
specdata$collectiondate_end
specdata$collectiondate_start
names(specdata)
rm(list=ls())
ry the data using the taxon name
# query the data using the taxon name
specdata <- querySpecData("Nepenthes")
# subset results that only have nucleotides from the matK region
specdata <- subset(specdata, markercode == "matK")
# get one observation per species
specdata <- getSpeciesRepr(specdata)
# generate a DNA bin
DNABin <- genDNABin(specdata)
# use the DNA bin to create a DNA string set
DNAStringset <- genDNAStringSet(DNABin)
# automatically manipulate the DNA strings
DNAStringSet_manip <- ManipStringSet(DNAStringset)
# use the function to remove unsuitable strings and store into an object
BadStringsRemoved <- rmBadStrings_3(
DNAStringSet = DNAStringSet_manip,
specimen_dataframe = specdata,
)
DNAStringSet_new <- BadStringsRemoved[[1]]
specdata_new <- BadStringsRemoved[[2]]
DNAStringSet_new
specdata_new
# automatically generate a phylo tree
PhyloTree <- genPhytree(DNAStringSet_new)
# change the label names
PhyloTree$tip.label <- specdata_new$species_name
# plot the phylo tree
plot(
PhyloTree,
label.offset = 0.0001,
cex = 1
)
# use the function to remove unsuitable strings and remove outliers
BadStringsRemoved <- rmBadStrings_3(
DNAStringSet = DNAStringSet_manip,
specimen_dataframe = specdata,
rmOutliers = T
)
rm(list=ls())
dev.off()
library(PhyInsight)
# query the data using the taxon name
specdata <- querySpecData("Nepenthes")
# subset results that only have nucleotides from the matK region
specdata <- subset(specdata, markercode == "matK")
# get one observation per species
specdata <- getSpeciesRepr(specdata)
# generate a DNA bin
DNABin <- genDNABin(specdata)
# use the DNA bin to create a DNA string set
DNAStringset <- genDNAStringSet(DNABin)
# automatically manipulate the DNA strings
DNAStringSet_manip <- ManipStringSet(DNAStringset)
# use the function to remove unsuitable strings and store into an object
BadStringsRemoved <- rmBadStrings_2(
DNAStringSet = DNAStringSet_manip,
specimen_dataframe = specdata,
)
DNAStringSet_new <- BadStringsRemoved[[1]]
specdata_new <- BadStringsRemoved[[2]]
# automatically generate a phylo tree
PhyloTree <- genPhytree(DNAStringSet_new)
# change the label names
PhyloTree$tip.label <- specdata_new$species_name
# plot the phylo tree
plot(
PhyloTree,
label.offset = 0.0001,
cex = 1
)
# use the function to remove unsuitable strings and remove outliers
BadStringsRemoved <- rmBadStrings_2(
DNAStringSet = DNAStringSet_manip,
specimen_dataframe = specdata,
rmOutliers = T
)
rm(list=ls())
dev.off()
library(PhyInsight)
# query the data using the taxon name
specdata <- querySpecData("Nepenthes")
# subset results that only have nucleotides from the matK region
specdata <- subset(specdata, markercode == "matK")
# get one observation per species
specdata <- getSpeciesRepr(specdata)
# generate a DNA bin
DNABin <- genDNABin(specdata)
# use the DNA bin to create a DNA string set
DNAStringset <- genDNAStringSet(DNABin)
# automatically manipulate the DNA strings
DNAStringSet_manip <- ManipStringSet(DNAStringset)
# use the function to remove unsuitable strings and store into an object
BadStringsRemoved <- rmBadStrings_1(
DNAStringSet = DNAStringSet_manip,
specimen_dataframe = specdata,
)
DNAStringSet_new <- BadStringsRemoved[[1]]
specdata_new <- BadStringsRemoved[[2]]
# automatically generate a phylo tree
PhyloTree <- genPhytree(DNAStringSet_new)
# change the label names
PhyloTree$tip.label <- specdata_new$species_name
# plot the phylo tree
plot(
PhyloTree,
label.offset = 0.0001,
cex = 1
)
# use the function to remove unsuitable strings and remove outliers
BadStringsRemoved <- rmBadStrings_1(
DNAStringSet = DNAStringSet_manip,
specimen_dataframe = specdata,
rmOutliers = T
)
dev.off()
rm(list=ls())
dev.off()
rm(list=ls())
dev.off()
################################
library(PhyInsight)
# query the data using the taxon name
specdata <- querySpecData("Nepenthes")
# subset results that only have nucleotides from the matK region
specdata <- subset(specdata, markercode == "matK")
# get one observation per species
specdata <- getSpeciesRepr(specdata)
# generate a DNA bin
DNABin <- genDNABin(specdata)
# use the DNA bin to create a DNA string set
DNAStringset <- genDNAStringSet(DNABin)
# automatically manipulate the DNA strings
DNAStringSet_manip <- ManipStringSet(DNAStringset)
# use the function to remove unsuitable strings and store into an object
BadStringsRemoved <- rmBadStrings_1(
DNAStringSet = DNAStringSet_manip,
specimen_dataframe = specdata,
)
DNAStringSet_new <- BadStringsRemoved[[1]]
specdata_new <- BadStringsRemoved[[2]]
# automatically generate a phylo tree
PhyloTree <- genPhytree(DNAStringSet_new)
# change the label names
PhyloTree$tip.label <- specdata_new$species_name
# plot the phylo tree
plot(
PhyloTree,
label.offset = 0.0001,
cex = 1
)
# use the function to remove unsuitable strings and remove outliers
BadStringsRemoved <- rmBadStrings_1(
DNAStringSet = DNAStringSet_manip,
specimen_dataframe = specdata,
rmOutliers = T
)
DNAStringSet_new <- BadStringsRemoved[[1]]
specdata_new <- BadStringsRemoved[[2]]
# automatically generate a phylo tree
PhyloTree <- genPhytree(DNAStringSet_new)
# change the label names
PhyloTree$tip.label <- specdata_new$species_name
# plot the phylo tree
plot(
PhyloTree,
label.offset = 0.0001,
cex = 1
)
# use the function to remove unsuitable strings and remove outliers
BadStringsRemoved <- rmBadStrings_1(
DNAStringSet = DNAStringSet_manip,
specimen_dataframe = specdata,
rmOutliers = T,
max_Z_score = 2
)
DNAStringSet_new <- BadStringsRemoved[[1]]
specdata_new <- BadStringsRemoved[[2]]
# automatically generate a phylo tree
PhyloTree <- genPhytree(DNAStringSet_new)
# change the label names
PhyloTree$tip.label <- specdata_new$species_name
# plot the phylo tree
plot(
PhyloTree,
label.offset = 0.0001,
cex = 1
)
dev.off()
rm(list=ls())
devtools::clean_vignettes() # ran but not sure ih helped or not
tools::buildVignettes(dir = getwd()) # this was helpful to checking ONE OF the index issues
# added a line to the index.Rmd file and may have helped...
devtools::document()
devtools::build(vignettes = T) # allowed it to delete inst/doc
devtools::check()
devtools::build()
devtools::check()
devtools::clean_vignettes() # ran but not sure ih helped or not
tools::buildVignettes(dir = getwd()) # this was helpful to checking ONE OF the index issues
# added a line to the index.Rmd file and may have helped...
devtools::document()
devtools::build(vignettes = T) # allowed it to delete inst/doc
devtools::check()
