[{"path":"https://jamesc845.github.io/PhyInsight/articles/PhyloTree_vignette_1.html","id":"section","dir":"Articles","previous_headings":"","what":"Quick Tree Building","title":"Quick Tree Building","text":"","code":"library(PhyInsight)"},{"path":"https://jamesc845.github.io/PhyInsight/articles/PhyloTree_vignette_1.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Quick Tree Building","text":"PhyInsight package used efficiently conduct DNA sequence analyses. vignette, use package functions order create phylogenetic tree demonstrated. functions package used manipulate DNA strings, remove mismatched strings, remove strings cause distance outliers necessary. processes performed automatically appropriate functions used can save user much time effort.   taxon can used provided DNA strings correct format. Ursidae family used example one can use PhyInsight manipulate DNA strings build phylogenetic tree just four functions specimen dataframe ready.  ","code":""},{"path":"https://jamesc845.github.io/PhyInsight/articles/PhyloTree_vignette_1.html","id":"subset-data","dir":"Articles","previous_headings":"","what":"Subset Data","title":"Quick Tree Building","text":"  Choosing gene region(s) use important step vary depending research question taxa. example, sequences COI-5P region used analysis. Also, getSpeciesRepr() used automatically select representative observations species.  ","code":"# query the data using the taxon name specdata <- querySpecData(\"Ursidae\")  # check the number of DNA marker codes sort(table(specdata$markercode)) #>  #>    16S D-loop    ND1    ND2    ND3    ND4   ND4L  ND5-0    ND6   atp6   COII COXIII   CYTB COI-5P  #>      4      9     14     14     14     14     14     14     14     39     41     41     42    523 # subset results that only have nucleotides from the COI-5P region specdata <- subset(specdata, markercode == \"COI-5P\")  # get one observation per species specdata <- getSpeciesRepr(specdata)"},{"path":"https://jamesc845.github.io/PhyInsight/articles/PhyloTree_vignette_1.html","id":"manipulate-dna-strings","dir":"Articles","previous_headings":"","what":"Manipulate DNA Strings","title":"Quick Tree Building","text":", functions package used automatically create DNA bin, create DNA string set object, automatically manipulate strings.  ","code":"# generate a DNA bin DNABin <- genDNABin(specdata)  # use the DNA bin to create a DNA string set DNAStringset <- genDNAStringSet(DNABin)  # automatically manipulate the DNA strings  DNAStringSet <- ManipStringSet(DNAStringset)"},{"path":"https://jamesc845.github.io/PhyInsight/articles/PhyloTree_vignette_1.html","id":"create-phylogenetic-tree","dir":"Articles","previous_headings":"","what":"Create Phylogenetic Tree","title":"Quick Tree Building","text":", genPhytree() function used automatically create phylo tree object. labels names, offset, size can also edited.  ","code":"# automatically generate a phylo tree PhyloTree <- genPhytree(DNAStringSet)   # change the label names PhyloTree$tip.label <- paste(specdata$genus_name, \"|\", specdata$species_name)"},{"path":"https://jamesc845.github.io/PhyInsight/articles/PhyloTree_vignette_1.html","id":"plot-phylogenetic-tree","dir":"Articles","previous_headings":"","what":"Plot Phylogenetic Tree","title":"Quick Tree Building","text":"","code":"# plot the phylo tree plot(   PhyloTree,   label.offset = 0.001,   cex = 1.5 )"},{"path":"https://jamesc845.github.io/PhyInsight/articles/PhyloTree_vignette_2.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Automated String Clean Up with rmBadStrings()","text":"rmBadStrings functions (rmBadStrings_1(), rmBadStrings_2(), rmBadStrings_3()) can used automatically clean DNA string set otherwise unsuitable analysis. functions automatically remove strings mismatched strings whose distances return NaN values considered outliers.  ","code":""},{"path":"https://jamesc845.github.io/PhyInsight/articles/PhyloTree_vignette_2.html","id":"subset-data","dir":"Articles","previous_headings":"","what":"Subset Data","title":"Automated String Clean Up with rmBadStrings()","text":" ","code":"# query the data using the taxon name specdata <- querySpecData(\"Nepenthes\")  # subset results that only have nucleotides from the matK region specdata <- subset(specdata, markercode == \"matK\")  # get one observation per species specdata <- getSpeciesRepr(specdata)"},{"path":"https://jamesc845.github.io/PhyInsight/articles/PhyloTree_vignette_2.html","id":"manipulate-dna-strings","dir":"Articles","previous_headings":"","what":"Manipulate DNA Strings","title":"Automated String Clean Up with rmBadStrings()","text":" ","code":"# generate a DNA bin DNABin <- genDNABin(specdata)  # use the DNA bin to create a DNA string set DNAStringset <- genDNAStringSet(DNABin)  # automatically manipulate the DNA strings  DNAStringSet_manip <- ManipStringSet(DNAStringset)"},{"path":"https://jamesc845.github.io/PhyInsight/articles/PhyloTree_vignette_2.html","id":"string-clean-up","dir":"Articles","previous_headings":"","what":"String Clean Up","title":"Automated String Clean Up with rmBadStrings()","text":"point attempting create phylo tree result error. Using DECIPHER::BrowseSeqs(DNAStringSet_manip) view string set reveal series mismatched fragmented strings. Using rmBadStrings_3() automatically remove mismatched strings. , tree can created plotted.","code":"# use the function to remove unsuitable strings and store into an object BadStringsRemoved <- rmBadStrings_3(   DNAStringSet = DNAStringSet_manip,   specimen_dataframe = specdata, )"},{"path":"https://jamesc845.github.io/PhyInsight/articles/PhyloTree_vignette_2.html","id":"store-new-objects","dir":"Articles","previous_headings":"","what":"Store New Objects","title":"Automated String Clean Up with rmBadStrings()","text":"","code":"DNAStringSet_new <- BadStringsRemoved[[1]] specdata_new <- BadStringsRemoved[[2]]"},{"path":"https://jamesc845.github.io/PhyInsight/articles/PhyloTree_vignette_2.html","id":"create-phylogenetic-tree","dir":"Articles","previous_headings":"","what":"Create Phylogenetic Tree","title":"Automated String Clean Up with rmBadStrings()","text":"     ","code":"# automatically generate a phylo tree PhyloTree <- genPhytree(DNAStringSet_new)  # change the label names PhyloTree$tip.label <- specdata_new$species_name  # plot the phylo tree plot(   PhyloTree,   label.offset = 0.0001,   cex = 1 )"},{"path":"https://jamesc845.github.io/PhyInsight/articles/PhyloTree_vignette_2.html","id":"remove-outliers","dir":"Articles","previous_headings":"","what":"Remove Outliers","title":"Automated String Clean Up with rmBadStrings()","text":"rmBadStrings functions also optional arguments remove strings whose DNA distances considered outliers. rmOutliers logical argument set TRUE automatically remove outliers well performing regular processes. max_Z_score numerical value allows user change maximum Z score string’s DNA distance. default value argument 3 score higher generally considered outlier.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/articles/PhyloTree_vignette_2.html","id":"remove-outliers-below-3-z-score","dir":"Articles","previous_headings":"Remove Outliers","what":"Remove Outliers (Below 3 Z-Score)","title":"Automated String Clean Up with rmBadStrings()","text":"","code":"# use the function to remove unsuitable strings and remove outliers BadStringsRemoved <- rmBadStrings_3(   DNAStringSet = DNAStringSet_manip,   specimen_dataframe = specdata,      rmOutliers = T ) #> [1] \"Outlier strings detected and removed:  68\""},{"path":"https://jamesc845.github.io/PhyInsight/articles/PhyloTree_vignette_2.html","id":"store-new-objects-1","dir":"Articles","previous_headings":"Remove Outliers","what":"Store New Objects","title":"Automated String Clean Up with rmBadStrings()","text":"","code":"DNAStringSet_new <- BadStringsRemoved[[1]] specdata_new <- BadStringsRemoved[[2]]"},{"path":"https://jamesc845.github.io/PhyInsight/articles/PhyloTree_vignette_2.html","id":"create-phylogenetic-tree-1","dir":"Articles","previous_headings":"Remove Outliers","what":"Create Phylogenetic Tree","title":"Automated String Clean Up with rmBadStrings()","text":"","code":"# automatically generate a phylo tree PhyloTree <- genPhytree(DNAStringSet_new)  # change the label names PhyloTree$tip.label <- specdata_new$species_name  # plot the phylo tree plot(   PhyloTree,   label.offset = 0.0001,   cex = 1 )"},{"path":"https://jamesc845.github.io/PhyInsight/articles/PhyloTree_vignette_2.html","id":"remove-outliers-below-2-z-score","dir":"Articles","previous_headings":"Remove Outliers","what":"Remove Outliers (Below 2 Z-Score)","title":"Automated String Clean Up with rmBadStrings()","text":"","code":"# use the function to remove unsuitable strings and remove outliers BadStringsRemoved <- rmBadStrings_3(   DNAStringSet = DNAStringSet_manip,   specimen_dataframe = specdata,      rmOutliers = T,      max_Z_score = 2 ) #>  [1] \"Outlier strings detected and removed:  6\"  #>  [2] \"Outlier strings detected and removed:  15\" #>  [3] \"Outlier strings detected and removed:  18\" #>  [4] \"Outlier strings detected and removed:  23\" #>  [5] \"Outlier strings detected and removed:  26\" #>  [6] \"Outlier strings detected and removed:  27\" #>  [7] \"Outlier strings detected and removed:  46\" #>  [8] \"Outlier strings detected and removed:  47\" #>  [9] \"Outlier strings detected and removed:  52\" #> [10] \"Outlier strings detected and removed:  68\" #> [11] \"Outlier strings detected and removed:  71\" #> [1] \"Outlier strings detected and removed:  10\" #> [2] \"Outlier strings detected and removed:  26\" #> [3] \"Outlier strings detected and removed:  28\" #> [4] \"Outlier strings detected and removed:  35\" #> [5] \"Outlier strings detected and removed:  38\" #> [6] \"Outlier strings detected and removed:  40\" #> [7] \"Outlier strings detected and removed:  61\" #> [8] \"Outlier strings detected and removed:  65\" #> [1] \"Outlier strings detected and removed:  30\" #>  [1] \"Outlier strings detected and removed:  6\"  #>  [2] \"Outlier strings detected and removed:  11\" #>  [3] \"Outlier strings detected and removed:  14\" #>  [4] \"Outlier strings detected and removed:  17\" #>  [5] \"Outlier strings detected and removed:  23\" #>  [6] \"Outlier strings detected and removed:  27\" #>  [7] \"Outlier strings detected and removed:  28\" #>  [8] \"Outlier strings detected and removed:  33\" #>  [9] \"Outlier strings detected and removed:  35\" #> [10] \"Outlier strings detected and removed:  36\" #> [11] \"Outlier strings detected and removed:  40\" #> [12] \"Outlier strings detected and removed:  52\" #> [13] \"Outlier strings detected and removed:  55\" #> [14] \"Outlier strings detected and removed:  59\" #> [15] \"Outlier strings detected and removed:  60\""},{"path":"https://jamesc845.github.io/PhyInsight/articles/PhyloTree_vignette_2.html","id":"store-new-objects-2","dir":"Articles","previous_headings":"Remove Outliers","what":"Store New Objects","title":"Automated String Clean Up with rmBadStrings()","text":"","code":"DNAStringSet_new <- BadStringsRemoved[[1]] specdata_new <- BadStringsRemoved[[2]]"},{"path":"https://jamesc845.github.io/PhyInsight/articles/PhyloTree_vignette_2.html","id":"create-phylogenetic-tree-2","dir":"Articles","previous_headings":"Remove Outliers","what":"Create Phylogenetic Tree","title":"Automated String Clean Up with rmBadStrings()","text":"","code":"# automatically generate a phylo tree PhyloTree <- genPhytree(DNAStringSet_new)  # change the label names PhyloTree$tip.label <- specdata_new$species_name  # plot the phylo tree plot(   PhyloTree,   label.offset = 0.0001,   cex = 1 )"},{"path":"https://jamesc845.github.io/PhyInsight/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James Churchward. Author, maintainer, copyright holder.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Churchward J (2023). PhyInsight: DNA Sequence Phylogenetic Tree Creation Analysis. R package version 0.1.0, https://jamesc845.github.io/PhyInsight/.","code":"@Manual{,   title = {PhyInsight: DNA Sequence Phylogenetic Tree Creation and Analysis},   author = {James Churchward},   year = {2023},   note = {R package version 0.1.0},   url = {https://jamesc845.github.io/PhyInsight/}, }"},{"path":"https://jamesc845.github.io/PhyInsight/index.html","id":"phyinsight-providing-efficient-phylogenetic-insights","dir":"","previous_headings":"","what":"DNA Sequence Phylogenetic Tree Creation and Analysis","title":"DNA Sequence Phylogenetic Tree Creation and Analysis","text":"Welcome PhyInsight, tool showing phylogenetic insights automatic DNA string manipulation.  ","code":""},{"path":"https://jamesc845.github.io/PhyInsight/index.html","id":"what-phyinsight-can-do","dir":"","previous_headings":"","what":"What PhyInsight Can Do","title":"DNA Sequence Phylogenetic Tree Creation and Analysis","text":"PhyInsight functions : retrieve specimen data organises easy--use dataframe automatically process DNA strings preparing analysis filter mismatched sequences detect remove outlier sequences create, plot, save phylogenetic trees  ","code":""},{"path":"https://jamesc845.github.io/PhyInsight/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"DNA Sequence Phylogenetic Tree Creation and Analysis","text":"can install PhyInsight 0.1.0 GitHub using following command:  ","code":"remotes::install_github(\"JamesC845/PhyInsight\")"},{"path":"https://jamesc845.github.io/PhyInsight/index.html","id":"upcoming-updates","dir":"","previous_headings":"","what":"Upcoming Updates","title":"DNA Sequence Phylogenetic Tree Creation and Analysis","text":"functions automatic phylogenetic tree inference functions added /existing functions updated PhyInsight compatible databases  ","code":""},{"path":"https://jamesc845.github.io/PhyInsight/index.html","id":"feedback","dir":"","previous_headings":"","what":"Feedback","title":"DNA Sequence Phylogenetic Tree Creation and Analysis","text":"kind feedback new upcoming R package welcome. Whether suggestions specific research applications, ideas new functions, constructive criticism improve package’s functionality, thoughts highly appreciated. Please don’t hesitate get contact share feedback via email jameschurchward1@outlook.com.  ","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/ManipStringSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Manipulate String Set — ManipStringSet","title":"Manipulate String Set — ManipStringSet","text":"Orient align DNA sequences DNA string set object.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/ManipStringSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manipulate String Set — ManipStringSet","text":"","code":"ManipStringSet(DNAStringSet)"},{"path":"https://jamesc845.github.io/PhyInsight/reference/ManipStringSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manipulate String Set — ManipStringSet","text":"DNAStringSet DNA string set object.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/ManipStringSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manipulate String Set — ManipStringSet","text":"DNA string set (ready analysis)","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/ManipStringSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manipulate String Set — ManipStringSet","text":"","code":"# generate and manipulate a DNA string set object using the taxon 'Antheraea polyphemus'  specdf_Anth <- querySpecData(\"Antheraea polyphemus\")[1:10,]  DNABin_Anth <- genDNABin(specdf_Anth)  DNAStringset_Anth <- genDNAStringSet(DNABin_Anth)  DNAStringSet_Anth_manipulated <- ManipStringSet(DNAStringset_Anth) #> ======================================================================================================================================================================================================== #>  #> Time difference of 0.04 secs #> Determining distance matrix based on shared 9-mers: #> ================================================================================ #>  #> Time difference of 0 secs #>  #> Clustering into groups by similarity: #> ================================================================================ #>  #> Time difference of 0 secs #>  #> Aligning Sequences: #> ================================================================================ #>  #> Time difference of 0.04 secs #>  #> Iteration 1 of 2: #>  #> Determining distance matrix based on alignment: #> ================================================================================ #>  #> Time difference of 0 secs #>  #> Reclustering into groups by similarity: #> ================================================================================ #>  #> Time difference of 0 secs #>  #> Realigning Sequences: #> ================================================================================ #>  #> Time difference of 0.04 secs #>  #> Alignment converged - skipping remaining iteration. #>"},{"path":"https://jamesc845.github.io/PhyInsight/reference/genDNABin.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a DNA Bin — genDNABin","title":"Generate a DNA Bin — genDNABin","text":"Create DNA bin object using specimen dataframe.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/genDNABin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a DNA Bin — genDNABin","text":"","code":"genDNABin(specimen_dataframe)"},{"path":"https://jamesc845.github.io/PhyInsight/reference/genDNABin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a DNA Bin — genDNABin","text":"specimen_dataframe dataframe specimen data created using querySpecData()","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/genDNABin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a DNA Bin — genDNABin","text":"DNA bin object.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/genDNABin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a DNA Bin — genDNABin","text":"","code":"# generate a DNA bin object using the taxon 'Antheraea polyphemus'  specdf_Anth <- querySpecData(\"Antheraea polyphemus\")[1:10,]  DNABin_Anth <- genDNABin(specdf_Anth)"},{"path":"https://jamesc845.github.io/PhyInsight/reference/genDNAStringSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a DNA String Set — genDNAStringSet","title":"Generate a DNA String Set — genDNAStringSet","text":"Create DNA string set object using DNA bin object write read FASTA file.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/genDNAStringSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a DNA String Set — genDNAStringSet","text":"","code":"genDNAStringSet(DNABin, fileName = \"new_DNAString_file\")"},{"path":"https://jamesc845.github.io/PhyInsight/reference/genDNAStringSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a DNA String Set — genDNAStringSet","text":"DNABin DNA bin oibject fileName optional file name saved directory","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/genDNAStringSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a DNA String Set — genDNAStringSet","text":"DNA string set","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/genDNAStringSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a DNA String Set — genDNAStringSet","text":"","code":"# generate a DNA string set object using the taxon 'Antheraea polyphemus'  specdf_Anth <- querySpecData(\"Antheraea polyphemus\")[1:10,]  DNABin_Anth <- genDNABin(specdf_Anth)  DNAStringset_Anth <- genDNAStringSet(DNABin_Anth)"},{"path":"https://jamesc845.github.io/PhyInsight/reference/genPhytree.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Phylogenetic Tree Object — genPhytree","title":"Create a Phylogenetic Tree Object — genPhytree","text":"Create phylo tree object using manipulated DNA string set object.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/genPhytree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Phylogenetic Tree Object — genPhytree","text":"","code":"genPhytree(manipulated_stringset)"},{"path":"https://jamesc845.github.io/PhyInsight/reference/genPhytree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Phylogenetic Tree Object — genPhytree","text":"manipulated_stringset manipulated string set object.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/genPhytree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Phylogenetic Tree Object — genPhytree","text":"phylogenetic tree object","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/genPhytree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Phylogenetic Tree Object — genPhytree","text":"","code":"# create and plot a phylo tree  specdf_Anth <- querySpecData(\"Antheraea polyphemus\")[1:10,]  DNABin_Anth <- genDNABin(specdf_Anth)  DNAStringset_Anth <- genDNAStringSet(DNABin_Anth)  DNAStringSet_Anth_manipulated <- ManipStringSet(DNAStringset_Anth) #> ======================================================================================================================================================================================================== #>  #> Time difference of 0.01 secs #> Determining distance matrix based on shared 9-mers: #> ================================================================================ #>  #> Time difference of 0 secs #>  #> Clustering into groups by similarity: #> ================================================================================ #>  #> Time difference of 0 secs #>  #> Aligning Sequences: #> ================================================================================ #>  #> Time difference of 0.03 secs #>  #> Iteration 1 of 2: #>  #> Determining distance matrix based on alignment: #> ================================================================================ #>  #> Time difference of 0 secs #>  #> Reclustering into groups by similarity: #> ================================================================================ #>  #> Time difference of 0 secs #>  #> Realigning Sequences: #> ================================================================================ #>  #> Time difference of 0.03 secs #>  #> Alignment converged - skipping remaining iteration. #>   Phytree_Anth <- genPhytree(DNAStringSet_Anth_manipulated)  Phytree_Anth$edge.length <- Phytree_Anth$edge.length + (mean(Phytree_Anth$edge.length) * 0.1)  plot(Phytree_Anth)"},{"path":"https://jamesc845.github.io/PhyInsight/reference/getGenusRepr.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Genus Representatives — getGenusRepr","title":"Get Genus Representatives — getGenusRepr","text":"Get one observation/row per genus specimen dataframe.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/getGenusRepr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Genus Representatives — getGenusRepr","text":"","code":"getGenusRepr(specimen_dataframe)"},{"path":"https://jamesc845.github.io/PhyInsight/reference/getGenusRepr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Genus Representatives — getGenusRepr","text":"specimen_dataframe specimen dataframe.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/getGenusRepr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Genus Representatives — getGenusRepr","text":"dataframe column pertains variable row individual specimen.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/getGenusRepr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Genus Representatives — getGenusRepr","text":"","code":"# query data then extract one observation for each of the genera available  specdata <- PhyInsight::querySpecData(\"Alouatta\")  specdata <- getGenusRepr(specdata)"},{"path":"https://jamesc845.github.io/PhyInsight/reference/getSpeciesRepr.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Species Representatives — getSpeciesRepr","title":"Get Species Representatives — getSpeciesRepr","text":"Get one observation/row per species specimen dataframe.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/getSpeciesRepr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Species Representatives — getSpeciesRepr","text":"","code":"getSpeciesRepr(specimen_dataframe)"},{"path":"https://jamesc845.github.io/PhyInsight/reference/getSpeciesRepr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Species Representatives — getSpeciesRepr","text":"specimen_dataframe specimen dataframe.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/getSpeciesRepr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Species Representatives — getSpeciesRepr","text":"dataframe column pertains variable row individual specimen.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/getSpeciesRepr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Species Representatives — getSpeciesRepr","text":"","code":"# query data then extract one observation for each of the species available  specdata <- PhyInsight::querySpecData(\"Alouatta\")  specdata <- getSpeciesRepr(specdata)"},{"path":"https://jamesc845.github.io/PhyInsight/reference/querySpecData.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Specimen Data — querySpecData","title":"Query Specimen Data — querySpecData","text":"Get specimen DNA sequence data Bold Systems database returned dataframe.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/querySpecData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Specimen Data — querySpecData","text":"","code":"querySpecData(taxonName)"},{"path":"https://jamesc845.github.io/PhyInsight/reference/querySpecData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Specimen Data — querySpecData","text":"taxonName character string scientific name chosen taxon.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/querySpecData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Specimen Data — querySpecData","text":"dataframe column pertains variable row individual specimen.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/querySpecData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Specimen Data — querySpecData","text":"","code":"# generate a specimen data frame using the taxon 'Antheraea polyphemus'  specdf_Anth <- querySpecData(\"Antheraea polyphemus\")[1:10,]"},{"path":"https://jamesc845.github.io/PhyInsight/reference/rmBadStrings_1.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Mismatched DNA Sequences — rmBadStrings_1","title":"Remove Mismatched DNA Sequences — rmBadStrings_1","text":"Identify remove bad DNA sequences within string set. Prioritise removal smallest base width first.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/rmBadStrings_1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Mismatched DNA Sequences — rmBadStrings_1","text":"","code":"rmBadStrings_1(   DNAStringSet,   specimen_dataframe,   rmOutliers = F,   max_Z_score = 3 )"},{"path":"https://jamesc845.github.io/PhyInsight/reference/rmBadStrings_1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Mismatched DNA Sequences — rmBadStrings_1","text":"DNAStringSet DNA string set object. specimen_dataframe dataframe speciment data created using querySpecData(). rmOutliers logical value state whether remove DNA distance outlier strings max_Z_score numerical value change max Z score removing outliers.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/rmBadStrings_1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Mismatched DNA Sequences — rmBadStrings_1","text":"list two elements: DNA string set mismatched sequences removed (1st element) specimen dataframe data mismatched sequences removed (2nd element).","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/rmBadStrings_1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Mismatched DNA Sequences — rmBadStrings_1","text":"","code":"specdata <- PhyInsight::querySpecData(\"Panthera leo\")  specdata <- subset(specdata, markercode == \"COI-5P\")  DNABin_Leo <- genDNABin(specdata)  DNAStringset_Leo <- genDNAStringSet(DNABin_Leo)  DNAStringSet_Leo_manipulated <- ManipStringSet(DNAStringset_Leo) #> ======================================================================================================================================================================================================== #>  #> Time difference of 0.03 secs #> Determining distance matrix based on shared 9-mers: #> ================================================================================ #>  #> Time difference of 0.01 secs #>  #> Clustering into groups by similarity: #> ================================================================================ #>  #> Time difference of 0.01 secs #>  #> Aligning Sequences: #> ================================================================================ #>  #> Time difference of 0.37 secs #>  #> Iteration 1 of 2: #>  #> Determining distance matrix based on alignment: #> ================================================================================ #>  #> Time difference of 0 secs #>  #> Reclustering into groups by similarity: #> ================================================================================ #>  #> Time difference of 0.01 secs #>  #> Realigning Sequences: #> ================================================================================ #>  #> Time difference of 0.17 secs #>  #> Iteration 2 of 2: #>  #> Determining distance matrix based on alignment: #> ================================================================================ #>  #> Time difference of 0 secs #>  #> Reclustering into groups by similarity: #> ================================================================================ #>  #> Time difference of 0.01 secs #>  #> Realigning Sequences: #> ================================================================================ #>  #> Time difference of 0.01 secs #>  #> Refining the alignment: #> ================================================================================ #>  #> Time difference of 0.08 secs #>   StringsAndSpecdataframe <- rmMismatchStrings_1(   DNAStringSet = DNAStringSet_Leo_manipulated,  specimen_dataframe = specdata  ) #> Error in rmMismatchStrings_1(DNAStringSet = DNAStringSet_Leo_manipulated,     specimen_dataframe = specdata): could not find function \"rmMismatchStrings_1\"  DNAStringSet_NEW <- StringsAndSpecdataframe[[1]] #> Error in eval(expr, envir, enclos): object 'StringsAndSpecdataframe' not found  tail(DNAStringSet_NEW) #> Error in eval(expr, envir, enclos): object 'DNAStringSet_NEW' not found  specimen_dataframe_NEW <- StringsAndSpecdataframe[[2]] #> Error in eval(expr, envir, enclos): object 'StringsAndSpecdataframe' not found  tail(specimen_dataframe_NEW$processid) #> Error in eval(expr, envir, enclos): object 'specimen_dataframe_NEW' not found"},{"path":"https://jamesc845.github.io/PhyInsight/reference/rmBadStrings_2.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Mismatched DNA Sequences — rmBadStrings_2","title":"Remove Mismatched DNA Sequences — rmBadStrings_2","text":"Identify remove bad DNA sequences within string set. Sequentially removes mismatches sequences align.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/rmBadStrings_2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Mismatched DNA Sequences — rmBadStrings_2","text":"","code":"rmBadStrings_2(   DNAStringSet,   specimen_dataframe,   rmOutliers = F,   max_Z_score = 3 )"},{"path":"https://jamesc845.github.io/PhyInsight/reference/rmBadStrings_2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Mismatched DNA Sequences — rmBadStrings_2","text":"DNAStringSet DNA string set object. specimen_dataframe dataframe speciment data created using querySpecData(). rmOutliers logical value state whether remove DNA distance outlier strings max_Z_score numerical value change max Z score removing outliers.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/rmBadStrings_2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Mismatched DNA Sequences — rmBadStrings_2","text":"list two elements: DNA string set mismatched sequences removed (1st element) specimen dataframe data mismatched sequences removed (2nd element).","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/rmBadStrings_2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Mismatched DNA Sequences — rmBadStrings_2","text":"","code":"specdata <- PhyInsight::querySpecData(\"Panthera leo\")  specdata <- subset(specdata, markercode == \"COI-5P\")  DNABin_Leo <- genDNABin(specdata)  DNAStringset_Leo <- genDNAStringSet(DNABin_Leo)  DNAStringSet_Leo_manipulated <- ManipStringSet(DNAStringset_Leo) #> ======================================================================================================================================================================================================== #>  #> Time difference of 0.03 secs #> Determining distance matrix based on shared 9-mers: #> ================================================================================ #>  #> Time difference of 0.01 secs #>  #> Clustering into groups by similarity: #> ================================================================================ #>  #> Time difference of 0.01 secs #>  #> Aligning Sequences: #> ================================================================================ #>  #> Time difference of 0.37 secs #>  #> Iteration 1 of 2: #>  #> Determining distance matrix based on alignment: #> ================================================================================ #>  #> Time difference of 0 secs #>  #> Reclustering into groups by similarity: #> ================================================================================ #>  #> Time difference of 0.01 secs #>  #> Realigning Sequences: #> ================================================================================ #>  #> Time difference of 0.16 secs #>  #> Iteration 2 of 2: #>  #> Determining distance matrix based on alignment: #> ================================================================================ #>  #> Time difference of 0 secs #>  #> Reclustering into groups by similarity: #> ================================================================================ #>  #> Time difference of 0.01 secs #>  #> Realigning Sequences: #> ================================================================================ #>  #> Time difference of 0.01 secs #>  #> Refining the alignment: #> ================================================================================ #>  #> Time difference of 0.08 secs #>   StringsAndSpecdataframe <- rmMismatchStrings_2(   DNAStringSet = DNAStringSet_Leo_manipulated,  specimen_dataframe = specdata  ) #> Error in rmMismatchStrings_2(DNAStringSet = DNAStringSet_Leo_manipulated,     specimen_dataframe = specdata): could not find function \"rmMismatchStrings_2\"  DNAStringSet_NEW <- StringsAndSpecdataframe[[1]] #> Error in eval(expr, envir, enclos): object 'StringsAndSpecdataframe' not found  tail(DNAStringSet_NEW) #> Error in eval(expr, envir, enclos): object 'DNAStringSet_NEW' not found  specimen_dataframe_NEW <- StringsAndSpecdataframe[[2]] #> Error in eval(expr, envir, enclos): object 'StringsAndSpecdataframe' not found  tail(specimen_dataframe_NEW$processid) #> Error in eval(expr, envir, enclos): object 'specimen_dataframe_NEW' not found"},{"path":"https://jamesc845.github.io/PhyInsight/reference/rmBadStrings_3.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Mismatched DNA Sequences — rmBadStrings_3","title":"Remove Mismatched DNA Sequences — rmBadStrings_3","text":"Identify remove bad DNA sequences within string set. Removes mismatched sequences.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/rmBadStrings_3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Mismatched DNA Sequences — rmBadStrings_3","text":"","code":"rmBadStrings_3(   DNAStringSet,   specimen_dataframe,   rmOutliers = F,   max_Z_score = 3 )"},{"path":"https://jamesc845.github.io/PhyInsight/reference/rmBadStrings_3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Mismatched DNA Sequences — rmBadStrings_3","text":"DNAStringSet DNA string set object. specimen_dataframe dataframe speciment data created using querySpecData(). rmOutliers logical value state whether remove DNA distance outlier strings max_Z_score numerical value change max Z score removing outliers.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/rmBadStrings_3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Mismatched DNA Sequences — rmBadStrings_3","text":"list two elements: DNA string set mismatched sequences removed (1st element) specimen dataframe data mismatched sequences removed (2nd element).","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/rmBadStrings_3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Mismatched DNA Sequences — rmBadStrings_3","text":"","code":"specdata <- PhyInsight::querySpecData(\"Panthera leo\")  specdata <- subset(specdata, markercode == \"COI-5P\")  DNABin_Leo <- genDNABin(specdata)  DNAStringset_Leo <- genDNAStringSet(DNABin_Leo)  DNAStringSet_Leo_manipulated <- ManipStringSet(DNAStringset_Leo) #> ======================================================================================================================================================================================================== #>  #> Time difference of 0.03 secs #> Determining distance matrix based on shared 9-mers: #> ================================================================================ #>  #> Time difference of 0.01 secs #>  #> Clustering into groups by similarity: #> ================================================================================ #>  #> Time difference of 0.01 secs #>  #> Aligning Sequences: #> ================================================================================ #>  #> Time difference of 0.36 secs #>  #> Iteration 1 of 2: #>  #> Determining distance matrix based on alignment: #> ================================================================================ #>  #> Time difference of 0 secs #>  #> Reclustering into groups by similarity: #> ================================================================================ #>  #> Time difference of 0.01 secs #>  #> Realigning Sequences: #> ================================================================================ #>  #> Time difference of 0.17 secs #>  #> Iteration 2 of 2: #>  #> Determining distance matrix based on alignment: #> ================================================================================ #>  #> Time difference of 0 secs #>  #> Reclustering into groups by similarity: #> ================================================================================ #>  #> Time difference of 0.01 secs #>  #> Realigning Sequences: #> ================================================================================ #>  #> Time difference of 0.01 secs #>  #> Refining the alignment: #> ================================================================================ #>  #> Time difference of 0.08 secs #>   StringsAndSpecdataframe <- rmMismatchStrings_1(   DNAStringSet = DNAStringSet_Leo_manipulated,  specimen_dataframe = specdata  ) #> Error in rmMismatchStrings_1(DNAStringSet = DNAStringSet_Leo_manipulated,     specimen_dataframe = specdata): could not find function \"rmMismatchStrings_1\"  DNAStringSet_NEW <- StringsAndSpecdataframe[[1]] #> Error in eval(expr, envir, enclos): object 'StringsAndSpecdataframe' not found  tail(DNAStringSet_NEW) #> Error in eval(expr, envir, enclos): object 'DNAStringSet_NEW' not found  specimen_dataframe_NEW <- StringsAndSpecdataframe[[2]] #> Error in eval(expr, envir, enclos): object 'StringsAndSpecdataframe' not found  tail(specimen_dataframe_NEW$processid) #> Error in eval(expr, envir, enclos): object 'specimen_dataframe_NEW' not found"},{"path":"https://jamesc845.github.io/PhyInsight/reference/savePhytree.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a Phylogenetic Tree Object — savePhytree","title":"Save a Phylogenetic Tree Object — savePhytree","text":"Create phylogenetic tree PDF using phylo tree object specimen dataframe.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/savePhytree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a Phylogenetic Tree Object — savePhytree","text":"","code":"savePhytree(   phyloTree,   specimen_dataframe,   tree_file_name = \"Phylogenetic Tree.pdf\",   open_PDF = T,   label_offset = 5.5e-05,   label_size = 0.3 )"},{"path":"https://jamesc845.github.io/PhyInsight/reference/savePhytree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a Phylogenetic Tree Object — savePhytree","text":"phyloTree phylo tree object specimen_dataframe specimen dataframe. tree_file_name optional character string name PDF file. open_PDF logical value state whether open PDF file. label_offset numerical value state label offset distance.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/savePhytree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a Phylogenetic Tree Object — savePhytree","text":"PDF file.","code":""},{"path":"https://jamesc845.github.io/PhyInsight/reference/savePhytree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a Phylogenetic Tree Object — savePhytree","text":"","code":"# create and plot a phylo tree specdf_Anth <- querySpecData(\"Antheraea polyphemus\")[1:10,]  DNABin_Anth <- genDNABin(specdf_Anth)  DNAStringset_Anth <- genDNAStringSet(DNABin_Anth)  DNAStringSet_Anth_manipulated <- ManipStringSet(DNAStringset_Anth) #> ======================================================================================================================================================================================================== #>  #> Time difference of 0.01 secs #> Determining distance matrix based on shared 9-mers: #> ================================================================================ #>  #> Time difference of 0 secs #>  #> Clustering into groups by similarity: #> ================================================================================ #>  #> Time difference of 0 secs #>  #> Aligning Sequences: #> ================================================================================ #>  #> Time difference of 0.03 secs #>  #> Iteration 1 of 2: #>  #> Determining distance matrix based on alignment: #> ================================================================================ #>  #> Time difference of 0 secs #>  #> Reclustering into groups by similarity: #> ================================================================================ #>  #> Time difference of 0 secs #>  #> Realigning Sequences: #> ================================================================================ #>  #> Time difference of 0.03 secs #>  #> Alignment converged - skipping remaining iteration. #>   Phytree_Anth <- genPhytree(DNAStringSet_Anth_manipulated)  savePhytree(Phytree_Anth, specdf_Anth, \"Anth_phylo_tree\", 0.000055)"}]
